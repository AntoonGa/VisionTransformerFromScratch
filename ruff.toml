# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    ".png",
    ".legacy"
]

target-version = "py311"

[lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.S
# All rules are listed here : https://docs.astral.sh/ruff/rules/#pyflakes-f
select = ["F", "E", "W", "I", "N", "UP", "YTT", "ANN", "ASYNC", "BLE", "FBT", "B", "A", "COM", "C4", "T10",
        "DJ", "EM", "EXE", "FA", "ISC", "ICN", "G", "INP", "PIE", "T20", "PYI", "PT", "Q", "RSE", "RET",
        "SLF", "SLOT", "SIM", "TID", "TCH", "INT", "TD", "ERA", "S","B008","PD",]
ignore = [
    # TO SOLVE:
    "BLE", # Ignore all blind exception issues
    "B905", # `zip()` without an explicit `strict=` parameter
    "A003", # Class attribute `id` 'type' is shadowing a Python builtin
    "DTZ", # Wrong Use of `datetime.now` detected
    "SIM105", # Exception handler
    "PTH", # proper use of PATH package
    "B008", #Do not perform function call `Depends` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
    "T201", # ignore print statements
     # proper usage of pandas
    # TO IGNORE:
    "S301", # `pickle` and modules that wrap it can be unsafe when used to deserialize untrusted data, possible security issue
    "FBT", # This limits the use of default boolean arguments in function definitions
    "C", # McCabe complexity ignored
    "S101", #Use of `assert` detected
    "ANN001", #Allow typing Any in import statements
    "ANN101", #Missing type annotation for `self` in method
    "ANN102", #Missing type annotation for `cls` in classmethod
    "ANN002", #Missing type annotation for *arg
    "ANN003", #Missing type annotation for **kwarg
    "UP007", #Use `X | Y` for type annotations: issues with the Optional module of type package
    "RET504", # prevents assignment of a variable before its return. Annoying for understandable code
    "RET505", # forces if else logic. Annoying for understandable code
    "RET507", #same as RET505
    "ARG", # prevents assignmenet of unused variables. This however is usefull for later use of the variable
    "FIX", # force issue resolving (in todos)
    "TD003", #force issue link in todos
    "COM812",
    "ISC001",
    "SIM118", # this prevents the use of keys() in dictionaries. But it forgets pd.Series have keys()...
    "SIM108",
    "UP032",
    "ERA001", #Found commented-out code
    "S311", # Standard pseudo-random generators are not suitable for security/cryptographic purposes
]


# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[format]
# Like Black, use double quotes for strings.
quote-style = "double"
# Like Black, indent with spaces, rather than tabs.
indent-style = "space"
# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false
# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[lint.pycodestyle]
max-line-length = 100
